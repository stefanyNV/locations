{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TrabajoFinal_Idea2_mono_objetivo_685339.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "PuScmwjyk-In",
        "9IhMfqBDk-It",
        "s-CL1YssYbD3",
        "DzeuHBHJYbD3",
        "KYi2oQPtYbD4",
        "e8CZqrC4k-Ix"
      ],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dnJCLCtuk-IR"
      },
      "source": [
        "## Algoritmo Genetico para solucionar localización óptima de supermercados"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H4atcpFJAuK2",
        "outputId": "4aca2f9a-9790-481a-9138-20cfa3383fc7"
      },
      "source": [
        "from google.colab import drive \n",
        "drive.mount('/content/drive/', force_remount=True)"
      ],
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GMioG_KnYbD0"
      },
      "source": [
        "### Define el objeto Item para supermercados\n",
        "Un objeto de clase Item almacena la latitud, longitud y poblacion del item "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i0ESg2MwYbD0"
      },
      "source": [
        "class Item(object):\n",
        "    def __init__(self, latitud, longitud, poblacion500m):\n",
        "        self.latitud  = latitud                                     # latitud del supermercado. La suma de la distancia entre los supermercados se quiere maximizar\n",
        "        self.longitud = longitud                                     # longitud del supermercado. La suma de la distancia entre los supermercados se quiere maximizar\n",
        "        self.poblacion500m = poblacion500m                            # poblacion500m del supermercado. La suma de la población de los supermercados se quiere maximizar"
      ],
      "execution_count": 148,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1HqRbcMRYbDz"
      },
      "source": [
        "### Datos para el Item"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c1oMO87WYbD0"
      },
      "source": [
        "import sys\n",
        "import time\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import random\n",
        "from copy import deepcopy\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 149,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "Av6GbU5sAu3H",
        "outputId": "7556d9bd-81c1-4356-9757-789925946189"
      },
      "source": [
        "candidatos = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/DiplomadoIA/M3_optimizacion/TrabajoFinal/Candidatos_supermercados.xlsx')\n",
        "candidatos.head(5)"
      ],
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Descripcion</th>\n",
              "      <th>Latitud</th>\n",
              "      <th>Longitud</th>\n",
              "      <th>Poblacion500m</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Punto 1</td>\n",
              "      <td>Esq. Benavides con Nicolas Dueñas</td>\n",
              "      <td>-12.04861</td>\n",
              "      <td>-77.06496</td>\n",
              "      <td>16500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ponto 2</td>\n",
              "      <td>Sta Bernardita con Republica de Venezuela</td>\n",
              "      <td>-12.05956</td>\n",
              "      <td>-77.07583</td>\n",
              "      <td>18000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Ponto 3</td>\n",
              "      <td>Santa Susana con Santa Gertrudis</td>\n",
              "      <td>-12.06524</td>\n",
              "      <td>-77.07334</td>\n",
              "      <td>17000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ponto 4</td>\n",
              "      <td>Belizario Sosa Pelaez</td>\n",
              "      <td>-12.05998</td>\n",
              "      <td>-77.06300</td>\n",
              "      <td>15000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ponto 5</td>\n",
              "      <td>Esq. Aurelio Garcia y Miranono Arredondo</td>\n",
              "      <td>-12.05541</td>\n",
              "      <td>-77.07497</td>\n",
              "      <td>17100</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        ID                                Descripcion  ...  Longitud  Poblacion500m\n",
              "0  Punto 1          Esq. Benavides con Nicolas Dueñas  ... -77.06496          16500\n",
              "1  Ponto 2  Sta Bernardita con Republica de Venezuela  ... -77.07583          18000\n",
              "2  Ponto 3           Santa Susana con Santa Gertrudis  ... -77.07334          17000\n",
              "3  Ponto 4                      Belizario Sosa Pelaez  ... -77.06300          15000\n",
              "4  Ponto 5   Esq. Aurelio Garcia y Miranono Arredondo  ... -77.07497          17100\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NpoYzdXIB_uc"
      },
      "source": [
        "ItemPool = [ Item(candidatos.Latitud[x], candidatos.Longitud[x], candidatos.Poblacion500m[x]) for x in range (0,candidatos.shape[0])]"
      ],
      "execution_count": 151,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TIgP9ZLfCtoY",
        "outputId": "18c40676-4393-4a51-b91e-b8fa9efd5d2b"
      },
      "source": [
        "ItemPool[1].latitud"
      ],
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-12.05956"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 152
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "teOgNitqNrHZ",
        "outputId": "9d10e397-6762-4bde-f6ae-46a2b695726f"
      },
      "source": [
        "ItemPool[15].latitud"
      ],
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-12.04817"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MnVcuNVdk-IS"
      },
      "source": [
        "### Define la estructura de un individuo en el AG con sus operadores genéticos \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JjbNgyCdk-IU"
      },
      "source": [
        "class Individual:\n",
        "\n",
        "    def __init__(self, chromosome):  # el constructor recibe un cromosoma\n",
        "        self.chromosome = chromosome[:]  \n",
        "        self.fitness = -1  # -1 indica que el individuo no ha sido evaluado\n",
        "\n",
        "    # def crossover_onepoint(self, other):\n",
        "    #     \"Retorna dos nuevos individuos del cruzamiento de un punto entre individuos self y other \"\n",
        "    #     c = random.randrange(len(self.chromosome))\n",
        "    #     ind1 = Individual(self.chromosome[:c] + other.chromosome[c:])\n",
        "    #     ind2 = Individual(other.chromosome[:c] + self.chromosome[c:])\n",
        "    #     return [ind1, ind2]   \n",
        "    \n",
        "\n",
        "    def crossover_uniform(self, other):\n",
        "        chromosome1 = []\n",
        "        chromosome2 = []\n",
        "        \"Retorna dos nuevos individuos del cruzamiento uniforme entre self y other \"\n",
        "        for i in range(len(self.chromosome)):\n",
        "            if random.uniform(0, 1) < 0.5:\n",
        "                chromosome1.append(self.chromosome[i])\n",
        "                chromosome2.append(other.chromosome[i])\n",
        "            else:\n",
        "                chromosome1.append(other.chromosome[i])\n",
        "                chromosome2.append(self.chromosome[i])\n",
        "        ind1 = Individual(chromosome1)\n",
        "        ind2 = Individual(chromosome2)\n",
        "        return [ind1, ind2] \n",
        "        \n",
        "\n",
        "\n",
        "    # def crossover_uniform(self, other):\n",
        "    #     i = 0\n",
        "    #     j = 0\n",
        "\n",
        "    #     # Genes activos en self\n",
        "    #     genesSelec_self = []\n",
        "    #     i = 0\n",
        "    #     for i in range(len(self.chromosome)):\n",
        "    #       if self.chromosome[i] == 1 : \n",
        "    #         genesSelec_self.append(i)\n",
        "        \n",
        "    #     # Genes activos en other\n",
        "    #     genesSelec_other = []\n",
        "    #     i = 0\n",
        "    #     for i in range(len(other.chromosome)):\n",
        "    #       if other.chromosome[i] == 1 : \n",
        "    #         genesSelec_other.append(i)\n",
        "        \n",
        "    #     son_self = []\n",
        "    #     son_other = []\n",
        "    #     i = 0\n",
        "    #     for i in range(10): \n",
        "\n",
        "    #       if random.uniform(0, 1) < 0.5 :\n",
        "\n",
        "\n",
        "\n",
        "    #         if genesSelec_self[i] not in son_self :\n",
        "    #           son_self.append(genesSelec_self[i])\n",
        "    #         else :\n",
        "    #           son_self.append( np.random.choice([x for x in  list(range(len(self.chromosome))) if x not in genesSelec_self ], 1, False) )\n",
        "            \n",
        "    #         if genesSelec_other[i] not in son_other :\n",
        "    #           son_other.append(genesSelec_other[i])\n",
        "    #         else :\n",
        "    #           son_other.append( np.random.choice([x for x in  list(range(len(other.chromosome))) if x not in genesSelec_other ], 1, False) )\n",
        "\n",
        "\n",
        "    #       else :\n",
        "    #         if genesSelec_other[i] not in son_self :\n",
        "    #           son_self.append(genesSelec_other[i])\n",
        "    #         else : \n",
        "    #           son_self.append( np.random.choice([x for x in  list(range(len(self.chromosome))) if x not in genesSelec_self ], 1, False) )\n",
        "            \n",
        "    #         if genesSelec_self[i] not in son_other :\n",
        "    #           son_other.append(genesSelec_self[i])\n",
        "    #         else : \n",
        "    #           son_other.append( np.random.choice([x for x in  list(range(len(other.chromosome))) if x not in genesSelec_other ], 1, False) )\n",
        "\n",
        "\n",
        "    #     \"Retorna dos nuevos individuos del cruzamiento entre self y other, solo entre los genes que son 1 \"\n",
        "    #     i = 0\n",
        "    #     chromosome1 = [0 for j in range( len(self.chromosome))] \n",
        "    #     chromosome2 = [0 for j in range( len(other.chromosome))] \n",
        "    #     for i in range(len(son_self)): \n",
        "    #       chromosome1[int(son_self[i])] = 1\n",
        "    #       chromosome2[int(son_other[i])] = 1\n",
        "    #     ind1 = Individual(chromosome1)\n",
        "    #     ind2 = Individual(chromosome2)\n",
        "    #     return [ind1, ind2] \n",
        "\n",
        "\n",
        "    def mutation_flip(self):\n",
        "        \"Cambia el alelo de 2 genes escogidos aleatoriamente.\"\n",
        "        new_chromosome = deepcopy(self.chromosome)\n",
        "        mutGene = random.randrange(0,len(new_chromosome))   # escoge un gen para mutar\n",
        "        if new_chromosome[mutGene] == 0:\n",
        "            new_chromosome[mutGene] = 1\n",
        "        else:\n",
        "            new_chromosome[mutGene] = 0\n",
        "        return Individual(new_chromosome)\n",
        "    \n",
        "    def mutation_multiflip(self):\n",
        "        \"\"\"\n",
        "        Cambia los alelos de un conjunto de genes escogidos aleatoriamente (hasta un maximo de 50% de genes).\n",
        "        \"\"\"\n",
        "        new_chromosome = deepcopy(self.chromosome)\n",
        "        cantidadGenes = int(0.5*len(new_chromosome))                  \n",
        "        genesSeleccionados = np.random.choice(new_chromosome, cantidadGenes, False)\n",
        "        for gen in genesSeleccionados:\n",
        "          if new_chromosome[gen] == 0:\n",
        "            new_chromosome[gen] = 1\n",
        "          else:\n",
        "            new_chromosome[gen] = 0\n",
        "        return Individual(new_chromosome)\n"
      ],
      "execution_count": 154,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dlfuzSNMor-H"
      },
      "source": [
        "# self = [0,1,0,1,1,0,0,1,1,1]\n",
        "# other = [0,1,1,1,0,1,0,0,1,1]\n",
        "\n",
        "\n",
        "# chromosome1 = [0 for j in range( len(self))] \n",
        "# chromosome2 = [0 for j in range( len(other))] \n",
        "\n",
        "# # Genes activos en self\n",
        "# genesSelec_self = []\n",
        "# i = 0\n",
        "# for i in range(len(self)):\n",
        "#   if self[i] == 1 : \n",
        "#     genesSelec_self.append(i)\n",
        "\n",
        "# # Genes activos en other\n",
        "# genesSelec_other = []\n",
        "# i = 0\n",
        "# for i in range(len(other)):\n",
        "#   if other[i] == 1 : \n",
        "#     genesSelec_other.append(i)\n",
        "\n",
        "# son_self = []\n",
        "# son_other = []\n",
        "# i = 0\n",
        "# for i in range(len(genesSelec_self)): \n",
        "\n",
        "#   if random.uniform(0, 1) < 0.5 :\n",
        "    \n",
        "\n",
        "#     if genesSelec_self[i] not in son_self :\n",
        "#       son_self.append(genesSelec_self[i])\n",
        "#     else :\n",
        "#       son_self.append( np.random.choice([x for x in  list(range(len(self))) if x not in genesSelec_self ], 1, False) )\n",
        "    \n",
        "#     if genesSelec_other[i] not in son_other :\n",
        "#       son_other.append(genesSelec_other[i])\n",
        "#     else :\n",
        "#       son_other.append( np.random.choice([x for x in  list(range(len(other))) if x not in genesSelec_other ], 1, False) )\n",
        "\n",
        "\n",
        "#   else :\n",
        "#     if genesSelec_other[i] not in son_self :\n",
        "#       son_self.append(genesSelec_other[i])\n",
        "#     else : \n",
        "#       son_self.append( np.random.choice([x for x in  list(range(len(self))) if x not in genesSelec_self ], 1, False) )\n",
        "    \n",
        "#     if genesSelec_self[i] not in son_other :\n",
        "#       son_other.append(genesSelec_self[i])\n",
        "#     else : \n",
        "#       son_other.append( np.random.choice([x for x in  list(range(len(other))) if x not in genesSelec_other ], 1, False) )\n",
        "\n",
        "\n",
        "# \"Retorna dos nuevos individuos del cruzamiento entre self y other, solo entre los genes que son 1 \"\n",
        "# i = 0\n",
        "# for i in range(len(son_self)): \n",
        "#   chromosome1[int(son_self[i])] = 1\n",
        "#   chromosome2[int(son_other[i])] = 1\n",
        "# ind1 = Individual(chromosome1)\n",
        "# ind2 = Individual(chromosome2)\n"
      ],
      "execution_count": 155,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vVlAwf5Nprx0"
      },
      "source": [
        "# ind1.chromosome"
      ],
      "execution_count": 156,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PuScmwjyk-In"
      },
      "source": [
        "### Funcion para inicializar aleatoriamente una población de individuos"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BhJe7IKuGk7W"
      },
      "source": [
        "chromosome_size = 60\n",
        "cantidadGenes = 10               "
      ],
      "execution_count": 157,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wlz2gDhNl1MC"
      },
      "source": [
        "# var1 = np.random.choice(chromosome_size, 10, False) ; var1\n",
        "# [x for x in list(range(60)) if x not in var1 ]\n",
        "\n",
        "# # np.random.choice([x for x in  list(range(len(self.chromosome))) if x not in genesSelec_self ], 1, False)\n",
        "# np.random.choice([x for x in  list(range(60)) if x not in var1 ], 1, False)"
      ],
      "execution_count": 158,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "swoZMGwdk-Io"
      },
      "source": [
        "def init_population(popsize, chromosome_size, cantidadGenes=10):\n",
        "\n",
        "  population = []\n",
        "  for i in range(popsize):     \n",
        "\n",
        "    new_chromosome = [0 for j in range(chromosome_size)]\n",
        "    cantidadGenes = 10\n",
        "    genesSeleccionados = np.random.choice(chromosome_size, 10, False)\n",
        "\n",
        "    for gen in genesSeleccionados:\n",
        "          if new_chromosome[gen] == 0:\n",
        "            new_chromosome[gen] = 1\n",
        "          else:\n",
        "            new_chromosome[gen] = 0\n",
        "\n",
        "    population.append( Individual(new_chromosome) ) \n",
        "\n",
        "  return population"
      ],
      "execution_count": 159,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yeCBGCnjK1wF",
        "outputId": "a589ca83-d0f9-4268-dab2-83dcfd552019"
      },
      "source": [
        "len(init_population(popsize=5, chromosome_size=60, cantidadGenes=10))"
      ],
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I4yiFn6wWDUb",
        "outputId": "ef27efd7-70d5-42f0-b8e5-5435a5cae068"
      },
      "source": [
        "init_population(popsize=5, chromosome_size=60, cantidadGenes=10)[4].chromosome[1]"
      ],
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fJsv0S_8k-IZ"
      },
      "source": [
        "### Funcion para obtener el fitness de un cromosoma"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jxHGsDvB90w-",
        "outputId": "9d381b33-c789-417c-d688-390f236cbfb0"
      },
      "source": [
        "!pip install haversine\n",
        "from haversine import haversine, Unit"
      ],
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: haversine in /usr/local/lib/python3.7/dist-packages (2.3.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x-OUH07tk-Ic"
      },
      "source": [
        "!pip install haversine\n",
        "from haversine import haversine, Unit\n",
        "\n",
        "def get_fitness(chromosome, items, max_sm):      \n",
        "    \n",
        "    fitness = 0 \n",
        "    sum_dist = 0\n",
        "    sum_pobl = 0\n",
        "    genes1 = 0\n",
        "\n",
        "    for i in range(len(items)):\n",
        "\n",
        "        temp_Dis = 0\n",
        "        temp_Pob = 0\n",
        "        temp_fit = 0\n",
        "\n",
        "        if chromosome[i] == 1:   \n",
        "          genes1 = genes1 + 1\n",
        "\n",
        "          for j in range((i+1), len(chromosome)):\n",
        "            if chromosome[j] == 1:\n",
        "              temp_Dis = temp_Dis + haversine((items[i].latitud, items[i].longitud), \n",
        "                                              (items[j].latitud, items[j].longitud), Unit.KILOMETERS)*1000   \n",
        "          sum_dist = sum_dist + temp_Dis \n",
        "          \n",
        "          temp_Pob = items[i].poblacion500m\n",
        "          sum_pobl = sum_pobl + temp_Pob\n",
        "\n",
        "    temp_fit = sum_dist + sum_pobl\n",
        "    fitness = fitness + temp_fit\n",
        "    \n",
        "    if genes1 > max_sm:\n",
        "      return 0, 0, 0\n",
        "\n",
        "    return fitness, sum_dist, sum_pobl\n"
      ],
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xw6sR4v7k-Ii"
      },
      "source": [
        "### Funcion para evaluar una población de individuos "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pqtbl-Zlk-Ij"
      },
      "source": [
        "def evaluate_population(population, items, max_sm):\n",
        "    \"\"\" Evalua una poblacion de individuos con la funcion get_fitness \"\"\"\n",
        "    popsize = len(population)\n",
        "    for i in range(popsize):\n",
        "        if population[i].fitness == -1:    # evalua solo si el individuo no esta evaluado\n",
        "            population[i].fitness = get_fitness(population[i].chromosome, items, max_sm)[0]\n",
        "            population[i].sum_dist = get_fitness(population[i].chromosome, items, max_sm)[1]\n",
        "            population[i].sum_pobl = get_fitness(population[i].chromosome, items, max_sm)[2]"
      ],
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9IhMfqBDk-It"
      },
      "source": [
        "### Operadores de seleccion de padres"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s-CL1YssYbD3"
      },
      "source": [
        "#### Seleccion por Ruleta"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KyRz3__4k-It"
      },
      "source": [
        "def select_parents_roulette(population):\n",
        "    popsize = len(population)\n",
        "    \n",
        "    # Escoje el primer padre\n",
        "    sumfitness = sum([indiv.fitness for indiv in population])  # suma total del fitness de la poblacion\n",
        "    pickfitness = random.uniform(0, sumfitness)   # escoge un numero aleatorio entre 0 y sumfitness\n",
        "    cumfitness = 0     # fitness acumulado\n",
        "    for i in range(popsize):\n",
        "        cumfitness += population[i].fitness\n",
        "        if cumfitness > pickfitness: \n",
        "            iParent1 = i\n",
        "            break\n",
        "    \n",
        "    # Escoje el segundo padre, desconsiderando el primer padre\n",
        "    sumfitness = sumfitness - population[iParent1].fitness # retira el fitness del padre ya escogido\n",
        "    pickfitness = random.uniform(0, sumfitness)   # escoge un numero aleatorio entre 0 y sumfitness\n",
        "    cumfitness = 0     # fitness acumulado\n",
        "    for i in range(popsize):\n",
        "        if i == iParent1: continue   # si es el primer padre \n",
        "        cumfitness += population[i].fitness\n",
        "        if cumfitness > pickfitness: \n",
        "            iParent2 = i\n",
        "            break        \n",
        "    return (population[iParent1], population[iParent2])"
      ],
      "execution_count": 165,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DzeuHBHJYbD3"
      },
      "source": [
        "#### Seleccion por Torneo"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k_CJhyALYbD4"
      },
      "source": [
        "def select_parents_tournament(population, tournament_size):\n",
        "    # Escoje el primer padre\n",
        "    list_indiv=[]\n",
        "    x1 = np.random.permutation(len(population) )\n",
        "    y1= x1[0:tournament_size]\n",
        "    for i in range(tournament_size):\n",
        "        list_indiv.append(population[y1[i]].fitness)\n",
        "    \n",
        "    iParent1=np.argmax(list_indiv)\n",
        "    \n",
        "    # Escoje el segundo padre, desconsiderando el primer padre   \n",
        "    x2 = np.delete(x1, iParent1)\n",
        "    x2 = np.random.permutation(x2)\n",
        "    list_indiv=[]\n",
        "    y2= x2[0:tournament_size]\n",
        "    for i in range(tournament_size):\n",
        "        list_indiv.append(population[y2[i]].fitness)\n",
        "    iParent2=np.argmax(list_indiv)\n",
        "    \n",
        "    return (population[x1[iParent1]],population[x2[iParent2]])"
      ],
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KYi2oQPtYbD4"
      },
      "source": [
        "### Operadores de Seleccion de sobrevivientes\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e8CZqrC4k-Ix"
      },
      "source": [
        "#### Función de selección de la poblacion para la sgte generación por ranking\n",
        "Selecciona la población siguiente ranqueando los individuos de la poblacion actual (population) y la poblacion descendencia (offspring_population) y escogiendo los mejores numsurvivors  individuos "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ua4QyA9hk-Ix"
      },
      "source": [
        "def select_survivors_ranking(population, offspring_population, numsurvivors):\n",
        "    next_population = []\n",
        "    population.extend(offspring_population) # une las dos poblaciones\n",
        "    isurvivors = sorted(range(len(population)), key=lambda i: population[i].fitness, reverse=True)[:numsurvivors]\n",
        "    for i in range(numsurvivors):\n",
        "        next_population.append(population[isurvivors[i]])\n",
        "    return next_population"
      ],
      "execution_count": 167,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "akvirSobk-I2"
      },
      "source": [
        "### Algoritmo Genetico para encontrar soluciones al problema de supermercados\n",
        " "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s_rCJHyMk-I4"
      },
      "source": [
        "def genetic_algorithm(population, items, ngen=100, pmut=0.1, max_sm=10, \n",
        "                      crossover=\"uniform\", mutation=\"flip\", \n",
        "                      selection_parents_method=\"roulette\", \n",
        "                      selection_survivors_method=\"ranking\"):\n",
        "    \"\"\"Algoritmo Genetico para el problema de la mochila\n",
        "        items:      pool de items a escoger para la mochila. \n",
        "                    Debe ser una lista de objetos de clase Item\n",
        "        max_weight: maximo peso que puede soportar la mochila\n",
        "        ngen:       maximo numero de generaciones \n",
        "        pmut:       tasa de mutacion\n",
        "        crossover:  operador de cruzamiento\n",
        "        mutation:   operador de mutacion\n",
        "        selection_parents_method: método de selección de padres para cruzamiento\n",
        "        selection_survivors_method: método de selección de sobrevivientes \n",
        "    \"\"\"\n",
        "    \n",
        "    popsize = len(population)\n",
        "    evaluate_population(population, items, max_sm)  # evalua la poblacion inicial\n",
        "    ibest = sorted(range(len(population)), key=lambda i: population[i].fitness, reverse=True)[:1]  # mejor individuo\n",
        "    bestfitness = [population[ibest[0]].fitness]  # fitness del mejor individuo\n",
        "    bestsum_dist = [population[ibest[0]].sum_dist] \n",
        "    bestsum_pobl = [population[ibest[0]].sum_pobl] \n",
        "    print(\"Poblacion inicial, best_fitness = {}\".format(population[ibest[0]].fitness), \n",
        "                              \"bestsum_dist = {}\".format(population[ibest[0]].sum_dist),\n",
        "                              \"bestsum_pobl = {}\".format(population[ibest[0]].sum_pobl),)\n",
        "    \n",
        "    for g in range(ngen):   # Por cada generacion\n",
        "\n",
        "        ## Selecciona parejas de individuos (mating_pool) para cruzamiento con el metodo de la ruleta\n",
        "        mating_pool = []\n",
        "        for i in range(int(popsize/2)):\n",
        "            if selection_parents_method == \"roulette\":\n",
        "                mating_pool.append(select_parents_roulette(population))\n",
        "            elif selection_parents_method == \"tournament\":\n",
        "                mating_pool.append(select_parents_tournament(population, 3))\n",
        "            else:\n",
        "                raise NotImplementedError\n",
        "        ## Crea la poblacion descendencia cruzando las parejas del mating pool \n",
        "        offspring_population = []\n",
        "        for i in range(len(mating_pool)): \n",
        "            if crossover == \"onepoint\":\n",
        "                offspring_population.extend( mating_pool[i][0].crossover_onepoint(mating_pool[i][1]) ) # cruzamiento 1 punto\n",
        "            elif crossover == \"uniform\":\n",
        "                offspring_population.extend( mating_pool[i][0].crossover_uniform(mating_pool[i][1]) ) # cruzamiento uniforme\n",
        "            else:\n",
        "                raise NotImplementedError\n",
        "\n",
        "        ## Aplica el operador de mutacion con probabilidad pmut en cada hijo generado\n",
        "        for i in range(len(offspring_population)):\n",
        "            if random.uniform(0, 1) < pmut: \n",
        "                if mutation == \"flip\":\n",
        "                    offspring_population[i] = offspring_population[i].mutation_flip() # cambia el alelo de un gen\n",
        "                # elif mutation == \"inversion\":\n",
        "                #     offspring_population[i] = offspring_population[i].mutation_inversion() # invierte todos los genes entre 2 puntos al azar\n",
        "                elif mutation == \"multiflip\":\n",
        "                    offspring_population[i] = offspring_population[i].mutation_multiflip()\n",
        "                else:\n",
        "                    raise NotImplementedError   \n",
        "        \n",
        "        ## Evalua la poblacion descendencia creada\n",
        "        evaluate_population(offspring_population, items, max_sm)   # evalua la poblacion descendencia\n",
        "        \n",
        "        ## Selecciona individuos para la sgte. generación \n",
        "        if selection_survivors_method == \"ranking\":\n",
        "            population = select_survivors_ranking(population, offspring_population, popsize) #metodo de ranking\n",
        "        else:\n",
        "            raise NotImplementedError\n",
        "            \n",
        "        ## Almacena la historia del fitness del mejor individuo\n",
        "        ibest = sorted(range(len(population)), key=lambda i: population[i].fitness, reverse=True)[:1]\n",
        "        bestfitness.append(population[ibest[0]].fitness)\n",
        "        bestsum_dist.append(population[ibest[0]].sum_dist)\n",
        "        bestsum_pobl.append(population[ibest[0]].sum_pobl)\n",
        "        \n",
        "        if (g % 10 == 0):  # muestra resultados cada 10 generaciones\n",
        "            print(\"generacion {}, (Mejor fitness = {}), (Mejor dist = {}), (Mejor pobl = {})\".format(g, population[ibest[0]].fitness, population[ibest[0]].sum_dist, population[ibest[0]].sum_pobl))\n",
        "\n",
        "    print(\"Mejor individuo en la ultima generacion = {} (fitness = {})\".format(population[ibest[0]].chromosome, population[ibest[0]].fitness))\n",
        "    return population[ibest[0]], bestfitness  # devuelve el mejor individuo y la lista de mejores fitness x gen"
      ],
      "execution_count": 168,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UBJge-E7k-I8"
      },
      "source": [
        " ## Probando el Algoritmo genetico"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nZjT-jl-YbD7"
      },
      "source": [
        "<b> Ejecuta el algoritmo genetico </b>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6F7Maha9dJYl",
        "outputId": "192dea31-8625-4e5f-fdf9-661d05069dce"
      },
      "source": [
        "## Hiperparametros del algoritmo genetico  \n",
        "NUM_ITEMS = 60        # numero de items\n",
        "POPSIZE = 100       # numero de individuos\n",
        "GENERATIONS = 500   # numero de generaciones\n",
        "PMUT = 0.1       # taza de mutacion\n",
        "MAX_SM = 10  \n",
        "\n",
        "## Inicializa una poblacion inicial de forma aleatoria\n",
        "population = init_population(POPSIZE, NUM_ITEMS)\n",
        "# Evolue la poblacion con el algoritmo genetico (cruzamiento 'uniform')\n",
        "best_ind, bestfitness = genetic_algorithm(population, ItemPool, ngen=GENERATIONS, pmut=PMUT , max_sm=MAX_SM,\n",
        "                                          crossover=\"uniform\", mutation=\"flip\", \n",
        "                                          selection_parents_method = 'roulette', \n",
        "                                          selection_survivors_method = 'ranking')\n",
        "\n",
        "# muestra la evolucion del mejor fitness\n",
        "plt.plot(bestfitness)\n",
        "plt.show()\n"
      ],
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Poblacion inicial, best_fitness = 648593.762011827 bestsum_dist = 519393.762011827 bestsum_pobl = 129200\n",
            "generacion 0, (Mejor fitness = 648593.762011827), (Mejor dist = 519393.762011827), (Mejor pobl = 129200)\n",
            "generacion 10, (Mejor fitness = 648790.4838783249), (Mejor dist = 511690.48387832486), (Mejor pobl = 137100)\n",
            "generacion 20, (Mejor fitness = 682554.2209440197), (Mejor dist = 560654.2209440197), (Mejor pobl = 121900)\n",
            "generacion 30, (Mejor fitness = 682554.2209440197), (Mejor dist = 560654.2209440197), (Mejor pobl = 121900)\n",
            "generacion 40, (Mejor fitness = 684180.7634701306), (Mejor dist = 556380.7634701306), (Mejor pobl = 127800)\n",
            "generacion 50, (Mejor fitness = 684704.3660872404), (Mejor dist = 565804.3660872404), (Mejor pobl = 118900)\n",
            "generacion 60, (Mejor fitness = 685540.3067346623), (Mejor dist = 556340.3067346623), (Mejor pobl = 129200)\n",
            "generacion 70, (Mejor fitness = 685546.0615838572), (Mejor dist = 556646.0615838572), (Mejor pobl = 128900)\n",
            "generacion 80, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 90, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 100, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 110, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 120, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 130, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 140, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 150, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 160, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 170, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 180, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 190, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 200, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 210, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 220, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 230, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 240, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 250, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 260, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 270, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 280, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 290, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 300, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 310, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 320, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 330, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 340, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 350, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 360, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 370, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 380, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 390, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 400, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 410, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 420, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 430, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 440, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 450, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 460, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 470, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 480, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "generacion 490, (Mejor fitness = 685821.6865321688), (Mejor dist = 557121.6865321688), (Mejor pobl = 128700)\n",
            "Mejor individuo en la ultima generacion = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0] (fitness = 685821.6865321688)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ao8DPMnKFYfj",
        "outputId": "eaea5d44-9c62-4b76-b17a-72de7666f391"
      },
      "source": [
        "print(bestfitness)"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[654238.3608246518, 654238.3608246518, 654238.3608246518, 654238.3608246518, 654238.3608246518, 654238.3608246518, 654238.3608246518, 654238.3608246518, 654238.3608246518, 654238.3608246518, 659582.9773064753, 659582.9773064753, 659582.9773064753, 659582.9773064753, 659582.9773064753, 659582.9773064753, 670324.6786768566, 670561.7132868699, 670561.7132868699, 670561.7132868699, 670561.7132868699, 670561.7132868699, 671984.951193066, 671984.951193066, 677355.2023439879, 678016.5640308966, 678016.5640308966, 678016.5640308966, 678016.5640308966, 678016.5640308966, 678016.5640308966, 678016.5640308966, 678016.5640308966, 678016.5640308966, 678771.5763263336, 680661.1535073222, 680661.1535073222, 680661.1535073222, 680661.1535073222, 680661.1535073222, 680661.1535073222, 680661.1535073222, 680722.2916595084, 680722.2916595084, 680722.2916595084, 680722.2916595084, 680722.2916595084, 680722.2916595084, 681892.889174177, 681892.889174177, 681892.889174177, 681892.889174177, 681892.889174177, 681892.889174177, 681892.889174177, 681892.889174177, 681892.889174177, 682251.9548915632, 682251.9548915632, 682251.9548915632, 682251.9548915632, 682251.9548915632, 682251.9548915632, 682251.9548915632, 682620.830472758, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683244.9632393989, 683322.882226387, 683590.4239415617, 683735.9599365982, 683735.9599365982, 684111.4540524258, 684111.4540524258, 684111.4540524258, 684111.4540524258, 684111.4540524258, 684390.945190657, 684390.945190657, 685195.4649187622, 685195.4649187622, 685195.4649187622, 685195.4649187622, 685195.4649187622, 685195.4649187622, 685195.4649187622, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501, 685339.4546782501]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
